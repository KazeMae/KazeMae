{"title":"对拍器","uid":"afbdc662f7a3047fa9981dc983cb9e4b","slug":"对拍器","date":"2024-01-08T13:06:00.000Z","updated":"2024-01-08T14:42:04.000Z","comments":true,"path":"api/articles/对拍器.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/8qdyho6c.png","content":"<h1 id=\"对拍是什么\"><a href=\"#对拍是什么\" class=\"headerlink\" title=\"对拍是什么\"></a>对拍是什么</h1><p>对拍，是一个比较实用的工具。它能够非常方便地对于两个程序的输出文件进行比较，可以帮助我们实现一些自动化的比较输出结果的问题。</p>\n<p>众所周知，几乎每一道编程题目，都会有某种正解能拿到满分；当我们想不出正解时，我们往往可以打暴力代码来获取部分分数。</p>\n<p>但是，当我们觉得有思路写正解，但又担心自己正解写的不对，而恰好，我们又有一个能够暴力骗分的代码。这个时候就可以用到对拍。 暴力骗分代码必须保证正确性，只是超出时间限制，不能出现答案错误的情况。</p>\n<p>这样，我们可以造多组数据，让暴力骗分的程序跑一遍，再让我们自己写的正解跑一遍，二者进行多次对比。如果多组数据都显示二者的输出结果一样，那么这个正解大概率没问题。相反地，如果两组数据不同，我们就找到了一组错误数据，方便调试，找到正解哪里出了问题。</p>\n<h1 id=\"对拍的实现\"><a href=\"#对拍的实现\" class=\"headerlink\" title=\"对拍的实现\"></a>对拍的实现</h1><h2 id=\"准备代码\"><a href=\"#准备代码\" class=\"headerlink\" title=\"准备代码\"></a>准备代码</h2><p>首先我们需要两份代码，一份是自己的解法，一份是暴力解法或者 std 以及数据生成代码。<br>我们以 $A + B$ 为例：</p>\n<ul>\n<li>自己的解法：<pre><code class=\"highlight c++\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span>  </span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;  \n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&quot;\\n&quot;</span>  </span>\n  \n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;  \n    <span class=\"type\">int</span> a, b;  \n    cin&gt;&gt; a &gt;&gt; b;  \n    cout&lt;&lt; a + b &lt;&lt;endl;  \n&#125;  \n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;  \n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);  \n<span class=\"comment\">//    int t; cin&gt;&gt; t; while(t --)  </span>\n        <span class=\"built_in\">solve</span>();  \n&#125;</code></pre></li>\n<li>暴力解法：<pre><code class=\"highlight c++\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span>  </span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;  \n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&quot;\\n&quot;</span>  </span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> int long long  </span>\n  \n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;  \n    <span class=\"type\">int</span> a, b;  \n    <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">0</span>;  \n    cin&gt;&gt; a &gt;&gt; b;  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a; ++ i) ans ++;  \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b; ++ i) ans ++;  \n    cout&lt;&lt; ans &lt;&lt;endl;  \n&#125;  \n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;  \n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);  \n<span class=\"comment\">//    int t; cin&gt;&gt; t; while(t --)  </span>\n        <span class=\"built_in\">solve</span>();  \n&#125;</code></pre></li>\n<li>数据生成代码：<pre><code class=\"highlight c++\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span>  </span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;  \n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&quot;\\n&quot;</span>  </span>\n  \n<span class=\"comment\">// 随机数生成函数  </span>\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;  \n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">myRand</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> B)</span> </span>&#123;  \n    <span class=\"keyword\">return</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)<span class=\"built_in\">rng</span>() % B; &#125;  \n  \n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;  \n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);  \n    <span class=\"comment\">// 生成并输出数据  </span>\n    cout&lt;&lt; <span class=\"built_in\">myRand</span>(<span class=\"number\">1500000000</span>) &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">myRand</span>(<span class=\"number\">1500000000</span>) &lt;&lt;endl;  \n&#125;</code></pre></li>\n</ul>\n<h2 id=\"准备程序和文件\"><a href=\"#准备程序和文件\" class=\"headerlink\" title=\"准备程序和文件\"></a>准备程序和文件</h2><p>将自己的解法程序编译生成的 <code>.exe</code> 文件，暴力解法编译生成的 <code>.exe</code> 文件和数据生成代码编译生成的 <code>.exe</code> 文件<strong>放到同一文件夹下</strong>。<br>并创建文件 <code>in.txt</code>，<code>std.txt</code>, <code>baoli.txt</code> 用于存放数据和输出结果。</p>\n<h2 id=\"对拍代码\"><a href=\"#对拍代码\" class=\"headerlink\" title=\"对拍代码\"></a>对拍代码</h2><h4 id=\"标准输入输出代码\"><a href=\"#标准输入输出代码\" class=\"headerlink\" title=\"标准输入输出代码\"></a>标准输入输出代码</h4><p>标准输入输出指的是：<strong>两份基本代码和数据生成代码</strong>里<strong>不含</strong>文件输入输出操作，如 <code>freopen</code> 等。<br>在这里，我们需要用到一些文件的读写符号。（需用到 <code>&lt;cstdlib&gt;</code> 库）<br><code>system(&quot;A.exe &gt; A.txt&quot;)</code> 指的是运行 <code>A.exe</code>，把结果输出（<code>&gt;</code>）到 <code>A.txt</code> 中。<br><code>system(&quot;B.exe &lt; A.txt &gt; C.txt&quot;)</code> 指的是运行 <code>B.exe</code>，从 <code>A.txt</code> 中读入（<code>&lt;</code>）数据，把结果输出（<code>&gt;</code>）到 <code>C.txt</code> 中。<br><code>system(&quot;fc A.txt B.txt&quot;)</code> 指的是比较 <code>A.txt</code> 和 <code>B.txt</code> ，如果两个文件里的数据相同返回 $0$，不同返回 $1$。</p>\n<p>那么，我们就可以执行这一操作来实现对拍：</p>\n<ol>\n<li>先让数据生成器输出数据。 <code>system(&quot;data.exe &gt; in.txt&quot;)</code></li>\n<li>然后用这个数据跑一遍暴力代码，输出结果。 <code>system(&quot;baoli.exe &lt; in.txt &gt; baoli.txt&quot;)</code></li>\n<li>再用这个数据跑一遍你写的正解代码，输出结果。 <code>system(&quot;std.exe &lt; in.txt &gt; std.txt&quot;)</code></li>\n<li>把两个结果相比较，判断是不是一样的。 <code>system(&quot;fc std.txt baoli.txt&quot;)</code></li>\n</ol>\n<h3 id=\"对拍程序代码：\"><a href=\"#对拍程序代码：\" class=\"headerlink\" title=\"对拍程序代码：\"></a>对拍程序代码：</h3><pre><code class=\"highlight c++\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>  </span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span>  </span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span>  </span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span>  </span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span>  </span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;  \n  \n<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;  \n    <span class=\"comment\">// 对拍次数  </span>\n    <span class=\"type\">int</span> n = <span class=\"number\">100000</span>, i = <span class=\"number\">1</span>;     \n    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; ++ i) &#123;  \n        <span class=\"comment\">// 生成数据  </span>\n        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;date.exe &gt; in.txt&quot;</span>);         <span class=\"comment\">// 运行自己的解法  </span>\n        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;std.exe &lt; in.txt &gt; std.txt&quot;</span>);         <span class=\"comment\">// 记录暴力开始时间  </span>\n        <span class=\"type\">double</span> begin = <span class=\"built_in\">clock</span>();         <span class=\"comment\">// 运行暴力程序  </span>\n        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;baoli.exe &lt; in.txt &gt; baoli.txt&quot;</span>);         <span class=\"comment\">// 计算暴力用时  </span>\n        <span class=\"type\">double</span> t = <span class=\"built_in\">clock</span>() - begin;         <span class=\"comment\">// 如果两次结果不一样  </span>\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">system</span>(<span class=\"string\">&quot;fc std.txt baoli.txt&quot;</span>)) &#123;             \n\t        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;测试点#%d Wrong Answer\\n&quot;</span>, i);  \n            <span class=\"comment\">// 退出程序  </span>\n            <span class=\"keyword\">break</span>;  \n        <span class=\"comment\">// 如果暴力程序超过 1 秒, 输出超时, 请根据不同题目自行修改或删除, 单位(ms)  </span>\n        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt; <span class=\"number\">1000</span>) &#123;  \n            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;测试点#%d Time Limited Exceeded 用时 %.0lfms\\n&quot;</span>, i, t);  \n        &#125;<span class=\"keyword\">else</span>             \n\t        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;测试点#%d Accepted 用时%.0lfms\\n&quot;</span>, i, t);  \n    &#125;  \n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n共 %d 组测试数据\\n&quot;</span>, i);  \n    <span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>); <span class=\"comment\">//休眠1秒  </span>\n&#125;</code></pre>\n\n<p><strong>将对拍代码编译生成的 <code>.exe</code> 放入之前创建的文件夹运行即可</strong></p>\n<p>当对拍器测到自己的解法和暴力代码运行结果不一样时会终止对拍，此时打开 <code>in.txt</code>， <code>std.txt</code>，<code>baoli.txt</code> 里面存放的就是运行结果不一样那次的数据，打开查看即可。<br>对拍器会计算 <code>baoli.exe</code> 的运行时间，默认是超过 $1000 \\ ms$ 判为超时，请根据自己需要进行修改或删除。</p>\n<h2 id=\"对拍结果\"><a href=\"#对拍结果\" class=\"headerlink\" title=\"对拍结果\"></a>对拍结果</h2><p>$e.g:$</p>\n<pre><code class=\"highlight shell\">正在比较文件 std.txt 和 BAOLI.TXT\nFC: 找不到差异\n\n测试点#1 Accepted 用时16ms\n正在比较文件 std.txt 和 BAOLI.TXT\nFC: 找不到差异\n\n测试点#2 Accepted 用时21ms\n正在比较文件 std.txt 和 BAOLI.TXT\n***** std.txt\n-1797548159\n***** BAOLI.TXT\n2497419137\n*****\n\n测试点#3 Wrong Answer\n\n共 3 组测试数据\n\n--------------------------------\nProcess exited after 1.236 seconds with return value 0 (0 ms cpu time, 4276 KB mem used).\nPress ANY key to exit...</code></pre>\n\n<p>可以看见在第 $3$ 次测试 <code>std.exe</code> 和 <code>baoli.txt</code> 的结果不一样了。打开查看数据，然后就可以开始快乐 $debug$ 了。</p>\n","feature":true,"text":"对拍是什么对拍，是一个比较实用的工具。它能够非常方便地对于两个程序的输出文件进行比较，可以帮助我们实现一些自动化的比较输出结果的问题。 众所周知，几乎每一道编程...","permalink":"/post/对拍器","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"},{"name":"工具","slug":"工具","count":2,"path":"api/tags/工具.json"},{"name":"Cpp","slug":"Cpp","count":4,"path":"api/tags/Cpp.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8B%8D%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">对拍是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8B%8D%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">对拍的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">准备代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87%E7%A8%8B%E5%BA%8F%E5%92%8C%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">准备程序和文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8B%8D%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">对拍代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">标准输入输出代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8B%8D%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">对拍程序代码：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8B%8D%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">对拍结果</span></a></li></ol></li></ol>","author":{"name":"KAZEmae","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/ta8dbhtt.png","link":"/","description":"","socials":{"github":"https://github.com/KazeMae","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/su-mu-78-85-44","csdn":"https://blog.csdn.net/weixin_73404823","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/248618134"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Remaining_Lotus"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Codeforces Hello 2024 题解(CF1919)","uid":"c129c513711abfc697aa038953107f79","slug":"Codeforces-Hello-2024-题解-CF1919","date":"2024-01-22T12:28:43.000Z","updated":"2024-01-22T12:43:00.147Z","comments":true,"path":"api/articles/Codeforces-Hello-2024-题解-CF1919.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/eqbjc9m9.png","text":"代码见文末 A Wallet Exchangehttps://codeforces.com/contest/1919/problem/A 求和看奇偶 B Plu...","permalink":"/post/Codeforces-Hello-2024-题解-CF1919","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":2,"path":"api/tags/题解.json"},{"name":"CodeForces","slug":"CodeForces","count":1,"path":"api/tags/CodeForces.json"}],"author":{"name":"KAZEmae","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/ta8dbhtt.png","link":"/","description":"","socials":{"github":"https://github.com/KazeMae","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/su-mu-78-85-44","csdn":"https://blog.csdn.net/weixin_73404823","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/248618134"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Remaining_Lotus"}}}},"feature":true},"next_post":{"title":"如何优雅地用 Sublime Text 刷题（C/C++）","uid":"0fe35e38e770f16f9b8cdba4cf1ece54","slug":"如何优雅地用-Sublime-Text-刷题（C-C","date":"2024-01-08T13:04:24.000Z","updated":"2024-01-22T06:47:09.000Z","comments":true,"path":"api/articles/如何优雅地用-Sublime-Text-刷题（C-C.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/eqbjc9m9.png","text":"LastEditTime: 2023-07-08 12:31:02 基本都是抄来改的，就当图个备份。(bushi) 0x01下载 Sublime TextSub...","permalink":"/post/如何优雅地用-Sublime-Text-刷题（C-C","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"工具","slug":"工具","count":2,"path":"api/tags/工具.json"},{"name":"Cpp","slug":"Cpp","count":4,"path":"api/tags/Cpp.json"}],"author":{"name":"KAZEmae","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/ta8dbhtt.png","link":"/","description":"","socials":{"github":"https://github.com/KazeMae","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/su-mu-78-85-44","csdn":"https://blog.csdn.net/weixin_73404823","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/248618134"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Remaining_Lotus"}}}},"feature":true}}