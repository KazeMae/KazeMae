{"title":"Codeforces Hello 2024 题解(CF1919)","uid":"c129c513711abfc697aa038953107f79","slug":"Codeforces-Hello-2024-题解-CF1919","date":"2024-01-22T12:28:43.000Z","updated":"2024-01-22T12:43:00.147Z","comments":true,"path":"api/articles/Codeforces-Hello-2024-题解-CF1919.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/eqbjc9m9.png","content":"<p>代码见文末</p>\n<h1 id=\"A-Wallet-Exchange\"><a href=\"#A-Wallet-Exchange\" class=\"headerlink\" title=\"A Wallet Exchange\"></a>A Wallet Exchange</h1><p><a href=\"https://codeforces.com/contest/1919/problem/A\">https://codeforces.com/contest/1919/problem/A</a></p>\n<p>求和看奇偶</p>\n<h1 id=\"B-Plus-Minus-Split\"><a href=\"#B-Plus-Minus-Split\" class=\"headerlink\" title=\"B Plus-Minus Split\"></a>B Plus-Minus Split</h1><p><a href=\"https://codeforces.com/contest/1919/problem/B\">https://codeforces.com/contest/1919/problem/B</a></p>\n<p>正负号个数作差取绝对值</p>\n<h1 id=\"C-Grouping-Increases\"><a href=\"#C-Grouping-Increases\" class=\"headerlink\" title=\"C Grouping Increases\"></a>C Grouping Increases</h1><p><a href=\"https://codeforces.com/contest/1919/problem/C\">https://codeforces.com/contest/1919/problem/C</a></p>\n<p>让递减的幅度尽量慢一点</p>\n<h1 id=\"D-01-Tree\"><a href=\"#D-01-Tree\" class=\"headerlink\" title=\"D 01 Tree\"></a>D 01 Tree</h1><p><a href=\"https://codeforces.com/contest/1919/problem/D\">https://codeforces.com/contest/1919/problem/D</a></p>\n<p>对于一个数寻找它左右第一个比它小的数是否比它小 $1$，若均非则不存在树。特判如果没有 $0$ 亦不存在树</p>\n<h1 id=\"F1-Wine-Factory-Easy-Version\"><a href=\"#F1-Wine-Factory-Easy-Version\" class=\"headerlink\" title=\"F1 Wine Factory (Easy Version)\"></a>F1 Wine Factory (Easy Version)</h1><p>$a_i-b_i$ 的前缀和和最小值减去 $b$ 数组的和即为答案，前者使用线段树维护</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h2><pre><code class=\"highlight c++\"><span class=\"comment\">/*******************************</span>\n<span class=\"comment\">| Author:  KAZE_mae</span>\n<span class=\"comment\">| Website: https://cloudfall.top</span>\n<span class=\"comment\">| Problem: A. Wallet Exchange</span>\n<span class=\"comment\">| Contest: Codeforces - Hello 2024</span>\n<span class=\"comment\">| URL:     https://codeforces.com/contest/1919/problem/A</span>\n<span class=\"comment\">| When:    2024-01-06 22:36:44</span>\n<span class=\"comment\">| </span>\n<span class=\"comment\">| Memory:  256 MB</span>\n<span class=\"comment\">| Time:    1000 ms</span>\n<span class=\"comment\">*******************************/</span>\n\n<span class=\"comment\">/********************************************</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⠛⠛⠛⠿⣿⣿⣿⣿⣿⣷⠀⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠀⠀⣠⣤⣤⣤⣤⣤⣤⣤⣀⠀⠉⠛⠿⠈⣦⠙⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⠟⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⣼⣿⣦⠙⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⠿⠛⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣿⣿⠀⠻⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⡟⠀⠀⠤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⠆⠀⠀⠙⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠿⢿⠿⠀⠀⠀⠀ ⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣦⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⣤⣆⠀⢠⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠋⠀⣿⣿⣿⣿⠋⠀⠈⢿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⠉⠀⠈⣿⣿⣿⣿⡆⠈⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠀⠸⠿⠿⣿⣿⠀⠀⠀⣸⣿⣿⡁⠀⠀⠀⠀⢙⣿⣿⣧⠀⠀⠀ ⢠⣿⡿⠿⠿ ⢹⣿⣿⣿</span>\n<span class=\"comment\">|⣟⠀⠀⠀⣀⠀⠀⠀⢙⣶⣾⣿⣿⣿⣿⣶⡄⢀⣴⣿⣿⣿⣿⣷⣶⡶⠁⠀⢀⠀⣀⠀⠀ ⢙⣿⣿</span>\n<span class=\"comment\">|⣿⠀⠻⠿⠛⠛⠛⠷⢾⣿⣿⣿⣿⣿⣿⣿⠇⠙⣿⣿⣿⣿⣿⣿⣿⣿⠒⠛⠛⠻⠿⢿⠀⢿⣿⣿</span>\n<span class=\"comment\">|⠟⠀⢀⢀⣤⣶⣶⣦⣾⣿⣿⣿⣿⣿⣿⢀⣶⣶⣀⠙⣿⣿⣿⣿⣿⣿⣦⣤⣶⣦⣄⠀⠀⠘⣿⣿</span>\n<span class=\"comment\">|⣷⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣶⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⢠⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⢀⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣷⡀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣴⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣶⣀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">*********************************************/</span>\n\n<span class=\"comment\">// #include &lt;bits/stdc++.h&gt;</span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;complex&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">using</span> Ld = <span class=\"type\">long</span> <span class=\"type\">double</span>;\n<span class=\"keyword\">using</span> uint = <span class=\"type\">unsigned</span> <span class=\"type\">int</span>;\n<span class=\"keyword\">using</span> ull = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;\n<span class=\"keyword\">using</span> pair2 = pair&lt;T, T&gt;;\n<span class=\"keyword\">using</span> PII = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLI = pair&lt;ll, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLL = pair&lt;ll, ll&gt;;\n\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;\n<span class=\"function\">ll <span class=\"title\">myRand</span><span class=\"params\">(ll B)</span></span>&#123; <span class=\"keyword\">return</span> (ull)<span class=\"built_in\">rng</span>() % B; &#125;\n\n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; (x) &lt;&lt; endl</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> abs(a) ((a) &gt;= 0 ? (a) : -(a))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> sz(x) ((int)(x).size())</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(), (x).end()</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span>\n<span class=\"comment\">// #define max(a, b) ((a) &gt; (b) ? (a) : (b))</span>\n<span class=\"comment\">// #define min(a, b) ((a) &lt; (b) ? (a) : (b))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for (int i = a; i &lt;= n; ++i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> per(i, n, a) for (int i = n; i &gt;= a; --i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mp make_pair</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> se second</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;(-x))</span>\n\n<span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000005</span>; <span class=\"comment\">// 1e6 + 5</span>\n<span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LNF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-7</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);\n<span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;\n\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> k, <span class=\"type\">long</span> <span class=\"type\">long</span> p = <span class=\"number\">9e18</span>)</span> </span>&#123;\n    <span class=\"type\">int</span> res = <span class=\"number\">1</span> % p, t = m;\n    <span class=\"keyword\">while</span> (k) &#123;\n        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) res = res * t % p;\n        t = t * t % p, k &gt;&gt;= <span class=\"number\">1</span>;\n    &#125;\n    <span class=\"keyword\">return</span> res;\n&#125;\n<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span> </span>&#123;  \n    <span class=\"keyword\">if</span> (!b) &#123; x = <span class=\"number\">1</span>; y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> a; &#125;  \n    <span class=\"type\">int</span> d = <span class=\"built_in\">exgcd</span>(b, a % b, y, x);\n    y -= (a/b) * x;  \n    <span class=\"keyword\">return</span> d;\n&#125;\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sqrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> N)</span> </span>&#123;\n    __int128 sqrtN = <span class=\"built_in\">sqrtl</span>(N) - <span class=\"number\">1</span>;\n    <span class=\"keyword\">while</span> (sqrtN + <span class=\"number\">1</span> &lt;= N / (sqrtN + <span class=\"number\">1</span>))sqrtN++;\n    <span class=\"keyword\">return</span> sqrtN;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;\n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;\n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);\n    <span class=\"comment\">// cout&lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(10);</span>\n    <span class=\"type\">int</span> _ = <span class=\"number\">1</span>; cin&gt;&gt; _; <span class=\"keyword\">while</span>(_ --)\n        <span class=\"built_in\">solve</span>();\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;\n<span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span>\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;\n    <span class=\"type\">int</span> a, b;\n    cin&gt;&gt; a &gt;&gt; b;\n    cout&lt;&lt; ((a + b) &amp; <span class=\"number\">1</span> ? <span class=\"string\">&quot;Alice&quot;</span> : <span class=\"string\">&quot;Bob&quot;</span>) &lt;&lt;endl;\n&#125; \n</code></pre>\n\n<h2 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h2><pre><code class=\"highlight c++\"><span class=\"comment\">/*******************************</span>\n<span class=\"comment\">| Author:  KAZE_mae</span>\n<span class=\"comment\">| Website: https://cloudfall.top</span>\n<span class=\"comment\">| Problem: B. Plus-Minus Split</span>\n<span class=\"comment\">| Contest: Codeforces - Hello 2024</span>\n<span class=\"comment\">| URL:     https://codeforces.com/contest/1919/problem/B</span>\n<span class=\"comment\">| When:    2024-01-06 22:40:22</span>\n<span class=\"comment\">| </span>\n<span class=\"comment\">| Memory:  256 MB</span>\n<span class=\"comment\">| Time:    1000 ms</span>\n<span class=\"comment\">*******************************/</span>\n\n<span class=\"comment\">/********************************************</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⠛⠛⠛⠿⣿⣿⣿⣿⣿⣷⠀⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠀⠀⣠⣤⣤⣤⣤⣤⣤⣤⣀⠀⠉⠛⠿⠈⣦⠙⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⠟⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⣼⣿⣦⠙⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⠿⠛⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣿⣿⠀⠻⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⡟⠀⠀⠤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⠆⠀⠀⠙⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠿⢿⠿⠀⠀⠀⠀ ⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣦⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⣤⣆⠀⢠⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠋⠀⣿⣿⣿⣿⠋⠀⠈⢿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⠉⠀⠈⣿⣿⣿⣿⡆⠈⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠀⠸⠿⠿⣿⣿⠀⠀⠀⣸⣿⣿⡁⠀⠀⠀⠀⢙⣿⣿⣧⠀⠀⠀ ⢠⣿⡿⠿⠿ ⢹⣿⣿⣿</span>\n<span class=\"comment\">|⣟⠀⠀⠀⣀⠀⠀⠀⢙⣶⣾⣿⣿⣿⣿⣶⡄⢀⣴⣿⣿⣿⣿⣷⣶⡶⠁⠀⢀⠀⣀⠀⠀ ⢙⣿⣿</span>\n<span class=\"comment\">|⣿⠀⠻⠿⠛⠛⠛⠷⢾⣿⣿⣿⣿⣿⣿⣿⠇⠙⣿⣿⣿⣿⣿⣿⣿⣿⠒⠛⠛⠻⠿⢿⠀⢿⣿⣿</span>\n<span class=\"comment\">|⠟⠀⢀⢀⣤⣶⣶⣦⣾⣿⣿⣿⣿⣿⣿⢀⣶⣶⣀⠙⣿⣿⣿⣿⣿⣿⣦⣤⣶⣦⣄⠀⠀⠘⣿⣿</span>\n<span class=\"comment\">|⣷⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣶⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⢠⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⢀⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣷⡀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣴⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣶⣀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">*********************************************/</span>\n\n<span class=\"comment\">// #include &lt;bits/stdc++.h&gt;</span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;complex&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">using</span> Ld = <span class=\"type\">long</span> <span class=\"type\">double</span>;\n<span class=\"keyword\">using</span> uint = <span class=\"type\">unsigned</span> <span class=\"type\">int</span>;\n<span class=\"keyword\">using</span> ull = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;\n<span class=\"keyword\">using</span> pair2 = pair&lt;T, T&gt;;\n<span class=\"keyword\">using</span> PII = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLI = pair&lt;ll, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLL = pair&lt;ll, ll&gt;;\n\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;\n<span class=\"function\">ll <span class=\"title\">myRand</span><span class=\"params\">(ll B)</span></span>&#123; <span class=\"keyword\">return</span> (ull)<span class=\"built_in\">rng</span>() % B; &#125;\n\n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; (x) &lt;&lt; endl</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> abs(a) ((a) &gt;= 0 ? (a) : -(a))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> sz(x) ((int)(x).size())</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(), (x).end()</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span>\n<span class=\"comment\">// #define max(a, b) ((a) &gt; (b) ? (a) : (b))</span>\n<span class=\"comment\">// #define min(a, b) ((a) &lt; (b) ? (a) : (b))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for (int i = a; i &lt;= n; ++i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> per(i, n, a) for (int i = n; i &gt;= a; --i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mp make_pair</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> se second</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;(-x))</span>\n\n<span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000005</span>; <span class=\"comment\">// 1e6 + 5</span>\n<span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LNF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-7</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);\n<span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;\n\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> k, <span class=\"type\">long</span> <span class=\"type\">long</span> p = <span class=\"number\">9e18</span>)</span> </span>&#123;\n    <span class=\"type\">int</span> res = <span class=\"number\">1</span> % p, t = m;\n    <span class=\"keyword\">while</span> (k) &#123;\n        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) res = res * t % p;\n        t = t * t % p, k &gt;&gt;= <span class=\"number\">1</span>;\n    &#125;\n    <span class=\"keyword\">return</span> res;\n&#125;\n<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span> </span>&#123;  \n    <span class=\"keyword\">if</span> (!b) &#123; x = <span class=\"number\">1</span>; y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> a; &#125;  \n    <span class=\"type\">int</span> d = <span class=\"built_in\">exgcd</span>(b, a % b, y, x);\n    y -= (a/b) * x;  \n    <span class=\"keyword\">return</span> d;\n&#125;\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sqrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> N)</span> </span>&#123;\n    __int128 sqrtN = <span class=\"built_in\">sqrtl</span>(N) - <span class=\"number\">1</span>;\n    <span class=\"keyword\">while</span> (sqrtN + <span class=\"number\">1</span> &lt;= N / (sqrtN + <span class=\"number\">1</span>))sqrtN++;\n    <span class=\"keyword\">return</span> sqrtN;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;\n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;\n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);\n    <span class=\"comment\">// cout&lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(10);</span>\n    <span class=\"type\">int</span> _ = <span class=\"number\">1</span>; cin&gt;&gt; _; <span class=\"keyword\">while</span>(_ --)\n        <span class=\"built_in\">solve</span>();\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;\n    <span class=\"type\">int</span> n, z = <span class=\"number\">0</span>, f = <span class=\"number\">0</span>;\n    string s;\n    cin&gt;&gt; n &gt;&gt; s;\n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++ i) &#123;\n        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;+&#x27;</span>) ++ z;\n        <span class=\"keyword\">else</span> ++ f;\n    &#125;\n    <span class=\"comment\">// cout &lt;&lt; z &lt;&lt; &quot; &quot; &lt;&lt; f &lt;&lt;endl;</span>\n    cout &lt;&lt; <span class=\"built_in\">abs</span>(z - f) &lt;&lt;endl;\n&#125; \n</code></pre>\n\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><pre><code class=\"highlight c++\"><span class=\"comment\">/*******************************</span>\n<span class=\"comment\">| Author:  KAZE_mae</span>\n<span class=\"comment\">| Website: https://cloudfall.top</span>\n<span class=\"comment\">| Problem: C. Grouping Increases</span>\n<span class=\"comment\">| Contest: Codeforces - Hello 2024</span>\n<span class=\"comment\">| URL:     https://codeforces.com/contest/1919/problem/C</span>\n<span class=\"comment\">| When:    2024-01-06 22:43:32</span>\n<span class=\"comment\">| </span>\n<span class=\"comment\">| Memory:  256 MB</span>\n<span class=\"comment\">| Time:    1000 ms</span>\n<span class=\"comment\">*******************************/</span>\n\n<span class=\"comment\">/********************************************</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⠛⠛⠛⠿⣿⣿⣿⣿⣿⣷⠀⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠀⠀⣠⣤⣤⣤⣤⣤⣤⣤⣀⠀⠉⠛⠿⠈⣦⠙⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⠟⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⣼⣿⣦⠙⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⠿⠛⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣿⣿⠀⠻⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⡟⠀⠀⠤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⠆⠀⠀⠙⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠿⢿⠿⠀⠀⠀⠀ ⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣦⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⣤⣆⠀⢠⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠋⠀⣿⣿⣿⣿⠋⠀⠈⢿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⠉⠀⠈⣿⣿⣿⣿⡆⠈⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠀⠸⠿⠿⣿⣿⠀⠀⠀⣸⣿⣿⡁⠀⠀⠀⠀⢙⣿⣿⣧⠀⠀⠀ ⢠⣿⡿⠿⠿ ⢹⣿⣿⣿</span>\n<span class=\"comment\">|⣟⠀⠀⠀⣀⠀⠀⠀⢙⣶⣾⣿⣿⣿⣿⣶⡄⢀⣴⣿⣿⣿⣿⣷⣶⡶⠁⠀⢀⠀⣀⠀⠀ ⢙⣿⣿</span>\n<span class=\"comment\">|⣿⠀⠻⠿⠛⠛⠛⠷⢾⣿⣿⣿⣿⣿⣿⣿⠇⠙⣿⣿⣿⣿⣿⣿⣿⣿⠒⠛⠛⠻⠿⢿⠀⢿⣿⣿</span>\n<span class=\"comment\">|⠟⠀⢀⢀⣤⣶⣶⣦⣾⣿⣿⣿⣿⣿⣿⢀⣶⣶⣀⠙⣿⣿⣿⣿⣿⣿⣦⣤⣶⣦⣄⠀⠀⠘⣿⣿</span>\n<span class=\"comment\">|⣷⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣶⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⢠⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⢀⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣷⡀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣴⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣶⣀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">*********************************************/</span>\n\n<span class=\"comment\">// #include &lt;bits/stdc++.h&gt;</span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;complex&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">using</span> Ld = <span class=\"type\">long</span> <span class=\"type\">double</span>;\n<span class=\"keyword\">using</span> uint = <span class=\"type\">unsigned</span> <span class=\"type\">int</span>;\n<span class=\"keyword\">using</span> ull = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;\n<span class=\"keyword\">using</span> pair2 = pair&lt;T, T&gt;;\n<span class=\"keyword\">using</span> PII = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLI = pair&lt;ll, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLL = pair&lt;ll, ll&gt;;\n\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;\n<span class=\"function\">ll <span class=\"title\">myRand</span><span class=\"params\">(ll B)</span></span>&#123; <span class=\"keyword\">return</span> (ull)<span class=\"built_in\">rng</span>() % B; &#125;\n\n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; (x) &lt;&lt; endl</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> abs(a) ((a) &gt;= 0 ? (a) : -(a))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> sz(x) ((int)(x).size())</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(), (x).end()</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span>\n<span class=\"comment\">// #define max(a, b) ((a) &gt; (b) ? (a) : (b))</span>\n<span class=\"comment\">// #define min(a, b) ((a) &lt; (b) ? (a) : (b))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for (int i = a; i &lt;= n; ++i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> per(i, n, a) for (int i = n; i &gt;= a; --i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mp make_pair</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> se second</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;(-x))</span>\n\n<span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000005</span>; <span class=\"comment\">// 1e6 + 5</span>\n<span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LNF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-7</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);\n<span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;\n\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> k, <span class=\"type\">long</span> <span class=\"type\">long</span> p = <span class=\"number\">9e18</span>)</span> </span>&#123;\n    <span class=\"type\">int</span> res = <span class=\"number\">1</span> % p, t = m;\n    <span class=\"keyword\">while</span> (k) &#123;\n        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) res = res * t % p;\n        t = t * t % p, k &gt;&gt;= <span class=\"number\">1</span>;\n    &#125;\n    <span class=\"keyword\">return</span> res;\n&#125;\n<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span> </span>&#123;  \n    <span class=\"keyword\">if</span> (!b) &#123; x = <span class=\"number\">1</span>; y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> a; &#125;  \n    <span class=\"type\">int</span> d = <span class=\"built_in\">exgcd</span>(b, a % b, y, x);\n    y -= (a/b) * x;  \n    <span class=\"keyword\">return</span> d;\n&#125;\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sqrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> N)</span> </span>&#123;\n    __int128 sqrtN = <span class=\"built_in\">sqrtl</span>(N) - <span class=\"number\">1</span>;\n    <span class=\"keyword\">while</span> (sqrtN + <span class=\"number\">1</span> &lt;= N / (sqrtN + <span class=\"number\">1</span>))sqrtN++;\n    <span class=\"keyword\">return</span> sqrtN;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;\n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;\n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);\n    <span class=\"comment\">// cout&lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(10);</span>\n    <span class=\"type\">int</span> _ = <span class=\"number\">1</span>; cin&gt;&gt; _; <span class=\"keyword\">while</span>(_ --)\n        <span class=\"built_in\">solve</span>();\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;\n    <span class=\"type\">int</span> n, ans = <span class=\"number\">0</span>;\n    cin&gt;&gt; n;\n    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span>, s, t</span>;\n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++ i) &#123;\n        cin&gt;&gt; a[i];\n        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">empty</span>()) s.<span class=\"built_in\">push_back</span>(a[i]);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t.<span class=\"built_in\">empty</span>() &amp;&amp; a[i] &lt;= s.<span class=\"built_in\">back</span>()) s.<span class=\"built_in\">push_back</span>(a[i]);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t.<span class=\"built_in\">empty</span>()) t.<span class=\"built_in\">push_back</span>(a[i]);\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"keyword\">if</span>(a[i] &lt;= s.<span class=\"built_in\">back</span>() &amp;&amp; a[i] &lt;= t.<span class=\"built_in\">back</span>()) &#123;\n                <span class=\"keyword\">if</span>(s.<span class=\"built_in\">back</span>() - a[i] &lt; t.<span class=\"built_in\">back</span>() - a[i]) s.<span class=\"built_in\">push_back</span>(a[i]);\n                <span class=\"keyword\">else</span> t.<span class=\"built_in\">push_back</span>(a[i]);\n            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt;= s.<span class=\"built_in\">back</span>()) s.<span class=\"built_in\">push_back</span>(a[i]);\n            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt;= t.<span class=\"built_in\">back</span>()) t.<span class=\"built_in\">push_back</span>(a[i]);\n            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] - s.<span class=\"built_in\">back</span>() &gt; a[i] - t.<span class=\"built_in\">back</span>()) s.<span class=\"built_in\">push_back</span>(a[i]);\n            <span class=\"keyword\">else</span> t.<span class=\"built_in\">push_back</span>(a[i]);\n        &#125;\n    &#125;\n    <span class=\"comment\">// for(auto i : s) cout &lt;&lt; i &lt;&lt; &quot; &quot;; cout &lt;&lt;endl;</span>\n    <span class=\"comment\">// for(auto i : t) cout &lt;&lt; i &lt;&lt; &quot; &quot;; cout &lt;&lt;endl;</span>\n    <span class=\"type\">int</span> q = <span class=\"number\">0</span>;\n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; ++ i) &#123;\n        <span class=\"keyword\">if</span>(a[i] &lt; a[i + <span class=\"number\">1</span>]) q ++;\n    &#125;\n    <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>()) &#123;\n        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"type\">int</span>)s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ++ i) &#123;\n            <span class=\"keyword\">if</span>(s[i] &lt; s[i + <span class=\"number\">1</span>]) ans ++;\n        &#125;\n    &#125;\n    <span class=\"keyword\">if</span>(!t.<span class=\"built_in\">empty</span>()) &#123;\n        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"type\">int</span>)t.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ++ i) &#123;\n            <span class=\"keyword\">if</span>(t[i] &lt; t[i + <span class=\"number\">1</span>]) ans ++;\n        &#125;\n    &#125;\n    <span class=\"comment\">// cout &lt;&lt; (!t.empty()) &lt;&lt; &quot; &quot; &lt;&lt; (!s.empty()) &lt;&lt;endl;</span>\n    cout &lt;&lt; <span class=\"built_in\">min</span>(ans,INF) &lt;&lt;endl;\n&#125; \n</code></pre>\n\n<h2 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h2><pre><code class=\"highlight c++\"><span class=\"comment\">/*******************************</span>\n<span class=\"comment\">| Author:  KAZE_mae</span>\n<span class=\"comment\">| Website: https://cloudfall.top</span>\n<span class=\"comment\">| Problem: D. 01 Tree</span>\n<span class=\"comment\">| Contest: Codeforces - Hello 2024</span>\n<span class=\"comment\">| URL:     https://codeforces.com/contest/1919/problem/D</span>\n<span class=\"comment\">| When:    2024-01-07 00:02:11</span>\n<span class=\"comment\">| </span>\n<span class=\"comment\">| Memory:  256 MB</span>\n<span class=\"comment\">| Time:    1000 ms</span>\n<span class=\"comment\">*******************************/</span>\n\n<span class=\"comment\">/********************************************</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⠛⠛⠛⠿⣿⣿⣿⣿⣿⣷⠀⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠀⠀⣠⣤⣤⣤⣤⣤⣤⣤⣀⠀⠉⠛⠿⠈⣦⠙⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⠟⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⣼⣿⣦⠙⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⠿⠛⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣿⣿⠀⠻⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⡟⠀⠀⠤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⠆⠀⠀⠙⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠿⢿⠿⠀⠀⠀⠀ ⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣦⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⣤⣆⠀⢠⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠋⠀⣿⣿⣿⣿⠋⠀⠈⢿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⠉⠀⠈⣿⣿⣿⣿⡆⠈⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠀⠸⠿⠿⣿⣿⠀⠀⠀⣸⣿⣿⡁⠀⠀⠀⠀⢙⣿⣿⣧⠀⠀⠀ ⢠⣿⡿⠿⠿ ⢹⣿⣿⣿</span>\n<span class=\"comment\">|⣟⠀⠀⠀⣀⠀⠀⠀⢙⣶⣾⣿⣿⣿⣿⣶⡄⢀⣴⣿⣿⣿⣿⣷⣶⡶⠁⠀⢀⠀⣀⠀⠀ ⢙⣿⣿</span>\n<span class=\"comment\">|⣿⠀⠻⠿⠛⠛⠛⠷⢾⣿⣿⣿⣿⣿⣿⣿⠇⠙⣿⣿⣿⣿⣿⣿⣿⣿⠒⠛⠛⠻⠿⢿⠀⢿⣿⣿</span>\n<span class=\"comment\">|⠟⠀⢀⢀⣤⣶⣶⣦⣾⣿⣿⣿⣿⣿⣿⢀⣶⣶⣀⠙⣿⣿⣿⣿⣿⣿⣦⣤⣶⣦⣄⠀⠀⠘⣿⣿</span>\n<span class=\"comment\">|⣷⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣶⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⢠⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⢀⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣷⡀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣴⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣶⣀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">*********************************************/</span>\n\n<span class=\"comment\">// #include &lt;bits/stdc++.h&gt;</span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;complex&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">using</span> Ld = <span class=\"type\">long</span> <span class=\"type\">double</span>;\n<span class=\"keyword\">using</span> uint = <span class=\"type\">unsigned</span> <span class=\"type\">int</span>;\n<span class=\"keyword\">using</span> ull = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;\n<span class=\"keyword\">using</span> pair2 = pair&lt;T, T&gt;;\n<span class=\"keyword\">using</span> PII = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLI = pair&lt;ll, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLL = pair&lt;ll, ll&gt;;\n\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;\n<span class=\"function\">ll <span class=\"title\">myRand</span><span class=\"params\">(ll B)</span></span>&#123; <span class=\"keyword\">return</span> (ull)<span class=\"built_in\">rng</span>() % B; &#125;\n\n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; (x) &lt;&lt; endl</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> abs(a) ((a) &gt;= 0 ? (a) : -(a))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> sz(x) ((int)(x).size())</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(), (x).end()</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span>\n<span class=\"comment\">// #define max(a, b) ((a) &gt; (b) ? (a) : (b))</span>\n<span class=\"comment\">// #define min(a, b) ((a) &lt; (b) ? (a) : (b))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for (int i = a; i &lt;= n; ++i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> per(i, n, a) for (int i = n; i &gt;= a; --i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mp make_pair</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> se second</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;(-x))</span>\n\n<span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000005</span>; <span class=\"comment\">// 1e6 + 5</span>\n<span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LNF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-7</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);\n<span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;\n\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> k, <span class=\"type\">long</span> <span class=\"type\">long</span> p = <span class=\"number\">9e18</span>)</span> </span>&#123;\n    <span class=\"type\">int</span> res = <span class=\"number\">1</span> % p, t = m;\n    <span class=\"keyword\">while</span> (k) &#123;\n        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) res = res * t % p;\n        t = t * t % p, k &gt;&gt;= <span class=\"number\">1</span>;\n    &#125;\n    <span class=\"keyword\">return</span> res;\n&#125;\n<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span> </span>&#123;  \n    <span class=\"keyword\">if</span> (!b) &#123; x = <span class=\"number\">1</span>; y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> a; &#125;  \n    <span class=\"type\">int</span> d = <span class=\"built_in\">exgcd</span>(b, a % b, y, x);\n    y -= (a/b) * x;  \n    <span class=\"keyword\">return</span> d;\n&#125;\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sqrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> N)</span> </span>&#123;\n    __int128 sqrtN = <span class=\"built_in\">sqrtl</span>(N) - <span class=\"number\">1</span>;\n    <span class=\"keyword\">while</span> (sqrtN + <span class=\"number\">1</span> &lt;= N / (sqrtN + <span class=\"number\">1</span>))sqrtN++;\n    <span class=\"keyword\">return</span> sqrtN;\n&#125;\n\n<span class=\"comment\">// #define int long long</span>\n<span class=\"keyword\">struct</span> <span class=\"title class_\">SEGT</span> &#123;\n    <span class=\"meta\">#<span class=\"keyword\">define</span> ls id &lt;&lt; 1</span>\n    <span class=\"meta\">#<span class=\"keyword\">define</span> rs id &lt;&lt; 1 | 1</span>\n    <span class=\"keyword\">struct</span> <span class=\"title class_\">Zhenen</span> &#123;\n        <span class=\"type\">long</span> <span class=\"type\">long</span> val;\n    &#125;;\n    vector&lt;<span class=\"type\">int</span>&gt; a;\n    vector&lt;Zhenen&gt; seg;\n    <span class=\"built_in\">SEGT</span>(<span class=\"type\">int</span> n) : <span class=\"built_in\">a</span>(n + <span class=\"number\">1</span>), <span class=\"built_in\">seg</span>(n * <span class=\"number\">4</span>) &#123;&#125;\n\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> </span>&#123;\n        seg[id].val = <span class=\"built_in\">min</span>(seg[ls].val, seg[rs].val);\n    &#125;\n\n\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> </span>&#123;\n        \n    &#125;\n\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == r) seg[id].val = a[l];\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n            <span class=\"built_in\">build</span>(ls, l, mid);\n            <span class=\"built_in\">build</span>(rs, mid + <span class=\"number\">1</span>, r);\n            <span class=\"built_in\">update</span>(id);\n        &#125;\n    &#125;\n    <span class=\"comment\">// 修改 [ql, qr] 为 t</span>\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ql, <span class=\"type\">int</span> qr, <span class=\"type\">long</span> <span class=\"type\">long</span> t)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == ql &amp;&amp; r == qr) &#123;\n            seg[id].val = t;\n            <span class=\"keyword\">return</span>;\n        &#125;\n        <span class=\"comment\">// pushdown(id);</span>\n        <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n        <span class=\"keyword\">if</span>(qr &lt;= mid) <span class=\"built_in\">modify</span>(ls, l , mid, ql, qr, t);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ql &gt; mid) <span class=\"built_in\">modify</span>(rs, mid + <span class=\"number\">1</span>, r, ql, qr, t);\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"built_in\">modify</span>(ls, l, mid, ql, mid, t);\n            <span class=\"built_in\">modify</span>(rs, mid + <span class=\"number\">1</span>, r, mid + <span class=\"number\">1</span>, qr, t);\n        &#125;\n        <span class=\"built_in\">update</span>(id);\n    &#125;\n    \n    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ql, <span class=\"type\">int</span> qr)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == ql &amp;&amp; r == qr) <span class=\"keyword\">return</span> seg[id].val;\n        <span class=\"built_in\">pushdown</span>(id);\n        <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n        <span class=\"keyword\">if</span>(qr &lt;= mid) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(ls, l, mid, ql, qr);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ql &gt; mid) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rs, mid + <span class=\"number\">1</span>, r, ql, qr);\n        <span class=\"keyword\">else</span> <span class=\"built_in\">return</span> (<span class=\"built_in\">query</span>(ls, l, mid, ql, mid) + <span class=\"built_in\">query</span>(rs, mid + <span class=\"number\">1</span>, r, mid + <span class=\"number\">1</span>, qr));\n    &#125;\n    <span class=\"comment\">// 寻找 [ql, qr] 大于等于 d 的第一个数的下标, 不存在返回 -1</span>\n    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ql, <span class=\"type\">int</span> qr, <span class=\"type\">int</span> d)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == ql &amp;&amp; r == qr) &#123;\n            <span class=\"keyword\">if</span>(seg[id].val &gt;= d) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\n            <span class=\"keyword\">else</span> &#123;\n                <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> l;\n                <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n                <span class=\"keyword\">if</span>(seg[ls].val &lt; d) <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(ls, l, mid, ql, mid, d);\n                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(rs, mid + <span class=\"number\">1</span>, r, mid + <span class=\"number\">1</span>, qr, d);\n            &#125;\n        &#125;\n        <span class=\"comment\">// pushdown(id);</span>\n        <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n        <span class=\"keyword\">if</span>(qr &lt;= mid) <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(ls, l, mid, ql, qr, d);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ql &gt; mid) <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(rs, mid + <span class=\"number\">1</span>, r, ql, qr, d);\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"type\">int</span> pos = <span class=\"built_in\">search</span>(ls, l, mid, ql, mid, d);\n            <span class=\"keyword\">if</span>(pos == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(rs, mid + <span class=\"number\">1</span>, r, mid + <span class=\"number\">1</span>, qr, d);\n            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> pos;\n        &#125;\n    &#125;\n    <span class=\"meta\">#<span class=\"keyword\">undef</span> ls</span>\n    <span class=\"meta\">#<span class=\"keyword\">undef</span> rs</span>\n&#125;;\n\n<span class=\"function\">string <span class=\"title\">solve</span><span class=\"params\">()</span></span>;\n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;\n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);\n    <span class=\"comment\">// cout&lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(10);</span>\n    <span class=\"type\">int</span> _ = <span class=\"number\">1</span>; cin&gt;&gt; _; <span class=\"keyword\">while</span>(_ --)\n        cout &lt;&lt; <span class=\"built_in\">solve</span>() &lt;&lt;endl;\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\">string <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;\n    <span class=\"type\">int</span> n, mn = INF;\n    cin&gt;&gt; n;\n    <span class=\"function\">SEGT <span class=\"title\">tr</span><span class=\"params\">(n)</span>, <span class=\"title\">rt</span><span class=\"params\">(n)</span></span>;\n    priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; q; \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++ i) \n        cin&gt;&gt; tr.a[i + <span class=\"number\">1</span>], q.<span class=\"built_in\">push</span>(&#123;tr.a[i + <span class=\"number\">1</span>], i + <span class=\"number\">1</span>&#125;), rt.a[n - i] = tr.a[i + <span class=\"number\">1</span>], mn = <span class=\"built_in\">min</span>(mn, tr.a[i + <span class=\"number\">1</span>]);\n    <span class=\"keyword\">if</span>(mn != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;NO&quot;</span>;\n    tr.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);\n    rt.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);\n    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;\n        <span class=\"keyword\">auto</span> [x, i] = q.<span class=\"built_in\">top</span>();\n        q.<span class=\"built_in\">pop</span>();\n        <span class=\"keyword\">auto</span> l = rt.<span class=\"built_in\">search</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, n - i + <span class=\"number\">1</span>, n, rt.a[n - i + <span class=\"number\">1</span>]), r = tr.<span class=\"built_in\">search</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, i, n, tr.a[i]);\n        <span class=\"keyword\">if</span>(l == <span class=\"number\">-1</span> &amp;&amp; r == <span class=\"number\">-1</span> &amp;&amp; !q.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"string\">&quot;NO&quot;</span>;\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l != <span class=\"number\">-1</span> &amp;&amp; r != <span class=\"number\">-1</span> &amp;&amp; tr.a[i] - rt.a[l] &gt; <span class=\"number\">1</span> &amp;&amp; tr.a[i] - tr.a[r] &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;NO&quot;</span>;\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l != <span class=\"number\">-1</span> &amp;&amp; r == <span class=\"number\">-1</span> &amp;&amp; tr.a[i] - rt.a[l] &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;NO&quot;</span>;\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(r != <span class=\"number\">-1</span> &amp;&amp; l == <span class=\"number\">-1</span> &amp;&amp; tr.a[i] - tr.a[r] &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;NO&quot;</span>;\n    &#125;\n    <span class=\"keyword\">return</span> <span class=\"string\">&quot;YES&quot;</span>;\n&#125;</code></pre>\n\n<h2 id=\"F1\"><a href=\"#F1\" class=\"headerlink\" title=\"F1\"></a>F1</h2><pre><code class=\"highlight c++\"><span class=\"comment\">/*******************************</span>\n<span class=\"comment\">| Author:  KAZE_mae</span>\n<span class=\"comment\">| Website: https://cloudfall.top</span>\n<span class=\"comment\">| Problem: F1. Wine Factory (Easy Version)</span>\n<span class=\"comment\">| Contest: Codeforces - Hello 2024</span>\n<span class=\"comment\">| URL:     https://codeforces.com/contest/1919/problem/F1</span>\n<span class=\"comment\">| When:    2024-01-18 11:36:01</span>\n<span class=\"comment\">| </span>\n<span class=\"comment\">| Memory:  512 MB</span>\n<span class=\"comment\">| Time:    5000 ms</span>\n<span class=\"comment\">*******************************/</span>\n\n<span class=\"comment\">/********************************************</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⠛⠛⠛⠿⣿⣿⣿⣿⣿⣷⠀⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠀⠀⣠⣤⣤⣤⣤⣤⣤⣤⣀⠀⠉⠛⠿⠈⣦⠙⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⠟⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⣼⣿⣦⠙⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⠿⠛⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣿⣿⠀⠻⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⡟⠀⠀⠤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⠆⠀⠀⠙⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠿⢿⠿⠀⠀⠀⠀ ⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣦⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⣤⣆⠀⢠⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠋⠀⣿⣿⣿⣿⠋⠀⠈⢿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⠉⠀⠈⣿⣿⣿⣿⡆⠈⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⠀⠸⠿⠿⣿⣿⠀⠀⠀⣸⣿⣿⡁⠀⠀⠀⠀⢙⣿⣿⣧⠀⠀⠀ ⢠⣿⡿⠿⠿ ⢹⣿⣿⣿</span>\n<span class=\"comment\">|⣟⠀⠀⠀⣀⠀⠀⠀⢙⣶⣾⣿⣿⣿⣿⣶⡄⢀⣴⣿⣿⣿⣿⣷⣶⡶⠁⠀⢀⠀⣀⠀⠀ ⢙⣿⣿</span>\n<span class=\"comment\">|⣿⠀⠻⠿⠛⠛⠛⠷⢾⣿⣿⣿⣿⣿⣿⣿⠇⠙⣿⣿⣿⣿⣿⣿⣿⣿⠒⠛⠛⠻⠿⢿⠀⢿⣿⣿</span>\n<span class=\"comment\">|⠟⠀⢀⢀⣤⣶⣶⣦⣾⣿⣿⣿⣿⣿⣿⢀⣶⣶⣀⠙⣿⣿⣿⣿⣿⣿⣦⣤⣶⣦⣄⠀⠀⠘⣿⣿</span>\n<span class=\"comment\">|⣷⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣶⣿⣿</span>\n<span class=\"comment\">|⣿⣆⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⢠⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⢀⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣷⡀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣴⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣶⣀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">|⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>\n<span class=\"comment\">*********************************************/</span>\n\n<span class=\"comment\">// #include &lt;bits/stdc++.h&gt;</span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;complex&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">using</span> Ld = <span class=\"type\">long</span> <span class=\"type\">double</span>;\n<span class=\"keyword\">using</span> uint = <span class=\"type\">unsigned</span> <span class=\"type\">int</span>;\n<span class=\"keyword\">using</span> ull = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;\n<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;\n<span class=\"keyword\">using</span> pair2 = pair&lt;T, T&gt;;\n<span class=\"keyword\">using</span> PII = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLI = pair&lt;ll, <span class=\"type\">int</span>&gt;;\n<span class=\"keyword\">using</span> PLL = pair&lt;ll, ll&gt;;\n\n<span class=\"function\">mt19937_64 <span class=\"title\">rng</span><span class=\"params\">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;\n<span class=\"function\">ll <span class=\"title\">myRand</span><span class=\"params\">(ll B)</span></span>&#123; <span class=\"keyword\">return</span> (ull)<span class=\"built_in\">rng</span>() % B; &#125;\n\n<span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; (x) &lt;&lt; endl</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> abs(a) ((a) &gt;= 0 ? (a) : -(a))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> sz(x) ((int)(x).size())</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(), (x).end()</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span>\n<span class=\"comment\">// #define max(a, b) ((a) &gt; (b) ? (a) : (b))</span>\n<span class=\"comment\">// #define min(a, b) ((a) &lt; (b) ? (a) : (b))</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for (int i = a; i &lt;= n; ++i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> per(i, n, a) for (int i = n; i &gt;= a; --i)</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> mp make_pair</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> se second</span>\n<span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;(-x))</span>\n\n<span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000005</span>; <span class=\"comment\">// 1e6 + 5</span>\n<span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LNF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-7</span>;\n<span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);\n<span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;\n\n<span class=\"comment\">// #define int long long</span>\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> k, <span class=\"type\">long</span> <span class=\"type\">long</span> p = <span class=\"number\">9e18</span>)</span> </span>&#123;\n    <span class=\"type\">int</span> res = <span class=\"number\">1</span> % p, t = m;\n    <span class=\"keyword\">while</span> (k) &#123;\n        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) res = res * t % p;\n        t = t * t % p, k &gt;&gt;= <span class=\"number\">1</span>;\n    &#125;\n    <span class=\"keyword\">return</span> res;\n&#125;\n<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a, <span class=\"type\">long</span> <span class=\"type\">long</span> b, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;x, <span class=\"type\">long</span> <span class=\"type\">long</span> &amp;y)</span> </span>&#123;  \n    <span class=\"keyword\">if</span> (!b) &#123; x = <span class=\"number\">1</span>; y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> a; &#125;  \n    <span class=\"type\">int</span> d = <span class=\"built_in\">exgcd</span>(b, a % b, y, x);\n    y -= (a/b) * x;  \n    <span class=\"keyword\">return</span> d;\n&#125;\n\n<span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Sqrt</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> N)</span> </span>&#123;\n    __int128 sqrtN = <span class=\"built_in\">sqrtl</span>(N) - <span class=\"number\">1</span>;\n    <span class=\"keyword\">while</span> (sqrtN + <span class=\"number\">1</span> &lt;= N / (sqrtN + <span class=\"number\">1</span>))sqrtN++;\n    <span class=\"keyword\">return</span> sqrtN;\n&#125;\n\n<span class=\"comment\">// #define int long long</span>\n<span class=\"keyword\">struct</span> <span class=\"title class_\">SEGT</span> &#123;\n    <span class=\"meta\">#<span class=\"keyword\">define</span> ls id &lt;&lt; 1</span>\n    <span class=\"meta\">#<span class=\"keyword\">define</span> rs id &lt;&lt; 1 | 1</span>\n    <span class=\"keyword\">struct</span> <span class=\"title class_\">Zhenen</span> &#123;\n        <span class=\"type\">long</span> <span class=\"type\">long</span> val, minv;\n    &#125;;\n    vector&lt;<span class=\"type\">int</span>&gt; a;\n    vector&lt;Zhenen&gt; seg;\n    <span class=\"built_in\">SEGT</span>(<span class=\"type\">int</span> n) : <span class=\"built_in\">a</span>(n + <span class=\"number\">1</span>), <span class=\"built_in\">seg</span>(n * <span class=\"number\">4</span>) &#123;&#125;\n    <span class=\"comment\">// 更新</span>\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> </span>&#123;\n        seg[id].val = seg[ls].val + seg[rs].val;\n        seg[id].minv = <span class=\"built_in\">min</span>(seg[ls].minv, seg[ls].val + seg[rs].minv);\n    &#125;\n    <span class=\"comment\">// 标记下传</span>\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> </span>&#123;\n        \n    &#125;\n\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == r) seg[id].val = a[l], seg[id].minv = <span class=\"built_in\">min</span>(a[l], <span class=\"number\">0</span>);\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n            <span class=\"built_in\">build</span>(ls, l, mid);\n            <span class=\"built_in\">build</span>(rs, mid + <span class=\"number\">1</span>, r);\n            <span class=\"built_in\">update</span>(id);\n        &#125;\n    &#125;\n\n    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == r) &#123;\n            seg[id].val = val, seg[id].minv = <span class=\"built_in\">min</span>(seg[id].val, <span class=\"number\">0ll</span>);\n        &#125;<span class=\"keyword\">else</span> &#123;\n            <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n            <span class=\"keyword\">if</span>(pos &lt;= mid) <span class=\"built_in\">change</span>(id * <span class=\"number\">2</span>, l, mid, pos, val);\n            <span class=\"keyword\">else</span> <span class=\"built_in\">change</span>(id * <span class=\"number\">2</span> + <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);\n            <span class=\"built_in\">update</span>(id);\n        &#125;\n    &#125;\n\n    <span class=\"comment\">// 查询 [ql, qr] 的区间和</span>\n    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ql, <span class=\"type\">int</span> qr)</span> </span>&#123;\n        <span class=\"keyword\">if</span>(l == ql &amp;&amp; r == qr) <span class=\"keyword\">return</span> seg[id].minv;\n        <span class=\"built_in\">pushdown</span>(id);\n        <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;\n        <span class=\"keyword\">if</span>(qr &lt;= mid) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(ls, l, mid, ql, qr);\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ql &gt; mid) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rs, mid + <span class=\"number\">1</span>, r, ql, qr);\n        <span class=\"keyword\">else</span> <span class=\"built_in\">return</span> (<span class=\"built_in\">query</span>(ls, l, mid, ql, mid) + <span class=\"built_in\">query</span>(rs, mid + <span class=\"number\">1</span>, r, mid + <span class=\"number\">1</span>, qr));\n    &#125;\n    <span class=\"meta\">#<span class=\"keyword\">undef</span> ls</span>\n    <span class=\"meta\">#<span class=\"keyword\">undef</span> rs</span>\n&#125;;\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;\n<span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;\n    std::ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);\n    <span class=\"comment\">// cout&lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(10);</span>\n    <span class=\"comment\">// int _ = 1; cin&gt;&gt; _; while(_ --)</span>\n        <span class=\"built_in\">solve</span>();\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;\n<span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span>\n\n<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;\n    <span class=\"type\">int</span> n, q, sumb = <span class=\"number\">0</span>;\n    cin&gt;&gt; n &gt;&gt; q;\n    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b</span><span class=\"params\">(n)</span>, <span class=\"title\">c</span><span class=\"params\">(n - <span class=\"number\">1</span>)</span></span>;\n    <span class=\"function\">SEGT <span class=\"title\">tr</span><span class=\"params\">(n)</span></span>;\n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++ i) cin&gt;&gt; tr.a[i + <span class=\"number\">1</span>]; \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++ i) cin&gt;&gt; b[i], sumb += b[i], tr.a[i + <span class=\"number\">1</span>] -= b[i]; \n    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; ++ i) cin&gt;&gt; c[i];\n    tr.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);\n    <span class=\"keyword\">while</span>(q --) &#123;\n        <span class=\"type\">int</span> p, x, y, z;\n        cin&gt;&gt; p &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        sumb += y - b[p - <span class=\"number\">1</span>], b[p - <span class=\"number\">1</span>] = y;\n        tr.<span class=\"built_in\">change</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, p, x - y);\n        cout &lt;&lt; tr.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, n) + sumb &lt;&lt;endl;\n    &#125; \n&#125; \n</code></pre>\n\n","feature":true,"text":"代码见文末 A Wallet Exchangehttps://codeforces.com/contest/1919/problem/A 求和看奇偶 B Plu...","permalink":"/post/Codeforces-Hello-2024-题解-CF1919","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"},{"name":"CodeForces","slug":"CodeForces","count":1,"path":"api/tags/CodeForces.json"},{"name":"题解","slug":"题解","count":2,"path":"api/tags/题解.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#A-Wallet-Exchange\"><span class=\"toc-text\">A Wallet Exchange</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#B-Plus-Minus-Split\"><span class=\"toc-text\">B Plus-Minus Split</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-Grouping-Increases\"><span class=\"toc-text\">C Grouping Increases</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#D-01-Tree\"><span class=\"toc-text\">D 01 Tree</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#F1-Wine-Factory-Easy-Version\"><span class=\"toc-text\">F1 Wine Factory (Easy Version)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A\"><span class=\"toc-text\">A</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B\"><span class=\"toc-text\">B</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C\"><span class=\"toc-text\">C</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D\"><span class=\"toc-text\">D</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#F1\"><span class=\"toc-text\">F1</span></a></li></ol></li></ol>","author":{"name":"KAZEmae","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/ta8dbhtt.png","link":"/","description":"","socials":{"github":"https://github.com/KazeMae","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/su-mu-78-85-44","csdn":"https://blog.csdn.net/weixin_73404823","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/248618134"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Remaining_Lotus"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"对拍器","uid":"afbdc662f7a3047fa9981dc983cb9e4b","slug":"对拍器","date":"2024-01-08T13:06:00.000Z","updated":"2024-01-08T14:42:04.000Z","comments":true,"path":"api/articles/对拍器.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/8qdyho6c.png","text":"对拍是什么对拍，是一个比较实用的工具。它能够非常方便地对于两个程序的输出文件进行比较，可以帮助我们实现一些自动化的比较输出结果的问题。 众所周知，几乎每一道编程...","permalink":"/post/对拍器","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":6,"path":"api/tags/算法.json"},{"name":"Cpp","slug":"Cpp","count":4,"path":"api/tags/Cpp.json"},{"name":"工具","slug":"工具","count":2,"path":"api/tags/工具.json"}],"author":{"name":"KAZEmae","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/ta8dbhtt.png","link":"/","description":"","socials":{"github":"https://github.com/KazeMae","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/su-mu-78-85-44","csdn":"https://blog.csdn.net/weixin_73404823","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/248618134"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Remaining_Lotus"}}}},"feature":true}}